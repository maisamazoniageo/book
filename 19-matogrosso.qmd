# Análise do Estado do Mato Grosso.
<div style="text-align: justify"> 

## Informações Gerais.

```{python}
#| echo: false
#| fig-align: center

# Definição de cores
cor_gleba = '#e9cf68'
cor_SIGEF = '#e0bd1f'
cor_PA = '#998115'
cor_TI = '#f2d4d3'
cor_TQ = '#d7c0dd'
cor_UC = '#99eb65'
cor_Floresta = '#a7f5e0'
cor_massa_agua = '#0751ff'
cor_rodovias = '#e10c00'
cor_gleba_flo = '#D9E3A9'
cor_gleba_uc = '#C1DC66'
cor_gleba_ti = '#EFD9A5'
cor_gleba_pa = '#C1A83E'
cor_gleba_tq = '#CDAFD4'
cor_gleba_sigef = '#E4C643'

uf_analise = 'Mato Grosso'

import geopandas as gpd
import pandas as pd
import locale
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from IPython.display import display, Markdown
pd.options.display.float_format = '{:.4f}'.format
pd.set_option('display.precision', 4)
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
import warnings
warnings.filterwarnings('ignore')
uf = gpd.read_file('../glebas-federais.gpkg', layer='uf-brasil')
uf_select = uf[uf['nm_uf']==uf_analise]
gleba_uf_clip = gpd.read_file('../glebas-federais.gpkg', layer=f'gleba-clip-{uf_analise}')
gleba_uf_dissolv = gpd.read_file('../glebas-federais.gpkg', layer=f'gleba-dissolv-{uf_analise}')
area_estudo = gpd.read_file('../glebas-federais.gpkg', layer='area-estudo')
floresta_B_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'floresta-tipo-b-{uf_analise}')
floresta_dissolv_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'floresta-tipo-b-dissolv-{uf_analise}')
sr_ponto = gpd.read_file('../glebas-federais.gpkg', layer='sr_incra', mask=uf_select)
uc_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'uc-{uf_analise}')
uc_dissolv = gpd.read_file('../glebas-federais.gpkg', layer=f'uc-dissolv-{uf_analise}')
ti_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'ti-{uf_analise}')
ti_dissolv = gpd.read_file('../glebas-federais.gpkg', layer=f'ti-dissolv-{uf_analise}')
pa_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'pa-{uf_analise}')
pa_dissolv = gpd.read_file('../glebas-federais.gpkg', layer=f'pa-dissolv-{uf_analise}')
tq_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'tq-{uf_analise}')
tq_dissolv = gpd.read_file('../glebas-federais.gpkg', layer=f'tq-dissolv-{uf_analise}')
sigef_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'sigef-{uf_analise}')
sigef_dissolv = sigef_uf[['uf_sigla','area_hecta']].groupby('uf_sigla').sum()
snci_uf = gpd.read_file('../glebas-federais.gpkg', layer=f'snci-{uf_analise}')
snci_dissolv = snci_uf[['uf_municip','area_ha']].groupby('uf_municip').sum()
# mun = gpd.read_file('../glebas-federais.gpkg', layer='municipios-area-estudo', mask=uf_select)
area_uf = round(uf_select['area_km2'],4)
```

```{python}
#| echo: false
#| fig-align: center

fig, ax = plt.subplots()
area_estudo.plot(ax=ax,facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
uf[uf['amaz_legal']==1].plot(ax=ax, facecolor = 'none', edgecolor = 'red', linewidth = 0.7)
uf_select.plot(ax=ax, facecolor = 'yellow', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
```

## Glebas Federais na Unidade da Federação.

### Área com Glebas Federais.
```{python}
#| echo: false
#| fig-align: center

fig_gleba2, ax_gleba2 = plt.subplots()
gleba_uf_clip.plot(ax=ax_gleba2, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
uf_select.plot(ax=ax_gleba2, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
area_total_glebas = round(gleba_uf_dissolv['area_km'].sum(),4)
percentual_glebas = round((area_total_glebas/area_uf)*100,2)
percentual_glebas = locale.currency(percentual_glebas.values[0], grouping=True, symbol=None)
area_total_glebas = locale.currency(area_total_glebas, grouping=True, symbol=None)
display(Markdown(f'### Área total de Glebas Federais no Estado do {uf_analise}: **{area_total_glebas} km²**'))

display(Markdown(f'### Percentual do {uf_analise} ocupado por Glebas Federais: **{percentual_glebas} %**'))
```




## Florestas Públicas.

### Florestas Públicas não destinadas.

Florestas Públicas do TIPO B (FPB) - São as florestas localizadas em áreas arrecadadas pelo Poder Público, mas que ainda não foram destinadas, de acordo com os dados baixados do Serviço Florestal Brasileiro.

fonte: [Serviço Florestal Brasileiro](https://www.gov.br/agricultura/pt-br/assuntos/servico-florestal-brasileiro/cadastro-nacional-de-florestas-publicas){target="_blank"}

```{python}
#| echo: false
#| fig-align: center
fig_flor, ax_flor = plt.subplots()
# flrestas tipo B dentro da uf analisada
floresta_B_uf.plot(ax=ax_flor,facecolor = cor_Floresta, edgecolor = 'none', alpha = 1, linewidth = 0.7)
uf_select.plot(ax=ax_flor, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
floresta_B_uf_area = floresta_dissolv_uf['area_km2'].sum()
percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
floresta_B_uf_area = locale.currency(floresta_B_uf_area, grouping=True, symbol=None)
percentual_floresta_B = locale.currency(percentual_floresta_B.values[0], grouping=True, symbol=None)

display(Markdown(f'### Área de Florestas Públicas não destinadas no {uf_analise}: **{floresta_B_uf_area} km²**'))

display(Markdown(f'### Percentual do {uf_analise} ocupado por Florestas Públicas não destinadas : **{percentual_floresta_B} %**'))
```


## Unidades de Conservação.

```{python}
#| echo: false
#| fig-align: center

fig_uc, ax_uc = plt.subplots()
uc_uf.plot(ax=ax_uc, facecolor= cor_UC, edgecolor='none', alpha=1)
uf_select.plot(ax=ax_uc, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
uc_uf_area = uc_dissolv['area_km'].sum()
percentual_uc = round((uc_uf_area/area_uf)*100,2)
uc_uf_area = locale.currency(uc_uf_area, grouping=True, symbol=None)
percentual_uc = locale.currency(percentual_uc.values[0], grouping=True, symbol=None)

display(Markdown(f'### Área de Unidades de Conservação no {uf_analise}: **{uc_uf_area} km²**'))

display(Markdown(f'### O Percentual do {uf_analise} ocupado por Unidades de Conservação : **{percentual_uc} %**'))
```

## Terras Indígenas

```{python}
#| echo: false
#| fig-align: center

fig_ti, ax_ti = plt.subplots()
ti_uf.plot(ax=ax_ti, facecolor= cor_TI, edgecolor='none', alpha=1)
uf_select.plot(ax=ax_ti, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
ti_uf_area = ti_dissolv['area_km2'].sum()
percentual_ti = round((ti_uf_area/area_uf)*100,2)
ti_uf_area = locale.currency(ti_uf_area, grouping=True, symbol=None)
percentual_ti = locale.currency(percentual_ti.values[0], grouping=True, symbol=None)

display(Markdown(f'### Área de Terras Indígenas no {uf_analise}: **{ti_uf_area} km²**'))

display(Markdown(f'### O Percentual do {uf_analise} ocupado por Terras Indígenas: **{percentual_ti} %**'))
```

## Projetos de Assentamento.

```{python}
#| echo: false
#| fig-align: center

fig_pa, ax_pa = plt.subplots()
pa_uf.plot(ax=ax_pa, facecolor= cor_PA, edgecolor='none', alpha=1)
uf_select.plot(ax=ax_pa, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
pa_uf_area = pa_dissolv['area_km2'].sum()
percentual_pa = round((pa_uf_area/area_uf)*100,2)
pa_uf_area = locale.currency(pa_uf_area, grouping=True, symbol=None)
percentual_pa = locale.currency(percentual_pa.values[0], grouping=True, symbol=None)

display(Markdown(f'### Área de Projetos de Assentamento no {uf_analise}: **{pa_uf_area} km²**'))

display(Markdown(f'### O Percentual do {uf_analise} ocupado por Projetos de Assentamento: **{percentual_pa} %**'))
```

## Territórios Quilombolas.

```{python}
#| echo: false
#| fig-align: center
tq_uf = []
if len(tq_uf)>0:
    fig_tq, ax_tq = plt.subplots()
    tq_uf.plot(ax=ax_tq, facecolor=cor_TQ, edgecolor='none', alpha=1)
    uf_select.plot(ax=ax_tq, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
    plt.grid(visible=True)
    plt.xlabel('Longitude (°)')
    plt.ylabel('Latitude (°)')
    plt.show()
    tq_uf_area = tq_dissolv['area_km2'].sum()
    percentual_tq = round((tq_uf_area/area_uf)*100,2)
    tq_uf_area = locale.currency(tq_uf_area, grouping=True, symbol=None)
    percentual_tq = locale.currency(percentual_tq.values[0], grouping=True, symbol=None)

    display(Markdown(f'### Área de Territórios Quilombolas no {uf_analise}: **{tq_uf_area} km²**'))

    display(Markdown(f'### O Percentual do {uf_analise} ocupado por Territórios Quilombolas: **{percentual_tq} %**'))
else:
     display(Markdown(f'### Não há Área de Territórios Quilombolas no {uf_analise}'))
```

## Certificações Particulares (SIGEF).

```{python}
#| echo: false
#| fig-align: center
if sigef_uf.shape[0]>0:
    fig_sigef, ax_sigef = plt.subplots()
    sigef_uf.plot(ax=ax_sigef, facecolor=cor_SIGEF, edgecolor='none', alpha=1)
    uf_select.plot(ax=ax_sigef, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
    plt.grid(visible=True)
    plt.xlabel('Longitude (°)')
    plt.ylabel('Latitude (°)')
    plt.show()
    sigef_uf_area = sigef_dissolv['area_hecta'].sum()/100
    percentual_sigef = round((sigef_uf_area/area_uf)*100,2)
    sigef_uf_area = locale.currency(sigef_uf_area, grouping=True, symbol=None)
    percentual_sigef = locale.currency(percentual_sigef.values[0], grouping=True, symbol=None)
    display(Markdown(f'### Área de Imóveis Certificados no {uf_analise}: **{sigef_uf_area} km²**'))
    display(Markdown(f'### O Percentual do {uf_analise} ocupado por Imóveis Certificados: **{percentual_sigef} %**'))

    display(Markdown(f'### O Estado do {uf_analise} possui **{sigef_uf.shape[0]}** polígonos Certificados'))
else:
    display(Markdown(f'### Não foi identificado Imóveis Certificados demarcados no {uf_analise}' ))
```

## Certificações Particulares (SNCI).

```{python}
#| echo: false
#| fig-align: center
if snci_uf.shape[0]>0:
    fig_snci, ax_snci = plt.subplots()
    snci_uf.plot(ax=ax_snci, facecolor=cor_SIGEF, edgecolor='none', alpha=1)
    uf_select.plot(ax=ax_snci, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
    plt.grid(visible=True)
    plt.xlabel('Longitude (°)')
    plt.ylabel('Latitude (°)')
    plt.show()
    snci_uf_area = snci_dissolv['area_ha'].sum()/100
    percentual_snci = round((snci_uf_area/area_uf)*100,2)
    snci_uf_area = locale.currency(snci_uf_area, grouping=True, symbol=None)
    percentual_snci = locale.currency(percentual_snci.values[0], grouping=True, symbol=None)
    display(Markdown(f'### Área de Imóveis Certificados no {uf_analise}: **{snci_uf_area} km²**'))
    display(Markdown(f'### O Percentual do {uf_analise} ocupado por Imóveis Certificados: **{percentual_snci} %**'))

    display(Markdown(f'### O Estado do {uf_analise} possui **{snci_uf.shape[0]}** polígonos Certificados'))
else:
    display(Markdown(f'### Não foi identificado Imóveis Certificados demarcados no {uf_analise}' ))
```

## Análise de Sobreposições.

As análises de sobreposições visam mostrar a sobreposição entre as classes de áreas públicas existentes para que possamos determinar se a relação é concorrente ou não. A análise será elaborada tendo as Glebas Federais como ponto pincipal sendo comparadas com Florestas Públicas não destinadas, Terras Indígenas, Unidades de Conservação e Projetos de Assentamento.

### Glebas Federais sobrepostas a Florestas Públicas não destinadas.

#### Mapa Geral.

```{python}
#| echo: false
#| fig-align: center

fig_gle_flo, ax_gle_flo = plt.subplots()
uf_select.plot(ax=ax_gle_flo, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
floresta_B_uf.plot(ax=ax_gle_flo, facecolor = cor_Floresta, edgecolor = 'none', alpha = 1, linewidth = 0.7)
gleba_uf_clip.plot(ax=ax_gle_flo, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor=cor_Floresta, alpha=1, edgecolor='none', label='Florestas Públicas', linewidth=1))
patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
patch_list.append(patches.Patch(facecolor=cor_gleba_flo, label='Florestas nas Glebas', linewidth=1))
# Creates a legend with the list of patches above.
ax_gle_flo.legend(handles=patch_list, fontsize=10, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
```

#### Glebas Federais com Floresta Pública não destinada.

```{python}
#| echo: false
#| fig-align: center
fig_gle_flo_clip, ax_gle_flo_clip = plt.subplots()
uf_select.plot(ax=ax_gle_flo_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
gle_flo_clip = gleba_uf_clip.overlay(floresta_B_uf, how='intersection', keep_geom_type=False)
gleba_uf_clip.plot(ax=ax_gle_flo_clip, facecolor = 'none', edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
gle_flo_clip.plot(ax=ax_gle_flo_clip, facecolor = cor_gleba_flo, edgecolor = 'none', alpha = 1, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
patch_list.append(patches.Patch(facecolor = cor_gleba_flo, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Florestas nas Glebas'))
# Creates a legend with the list of patches above.
ax_gle_flo_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)


plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()

# Recalculando a área das glebas no interior das florestas policônica em km2
gle_flo_clip['area_km2'] = (gle_flo_clip.to_crs(5880).area)/1000000

gle_flo_clip_area = gle_flo_clip['area_km2'].sum()
#percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
gle_flo_clip_area = locale.currency(gle_flo_clip_area, grouping=True, symbol=None)


display(Markdown(f'### A área de Florestas Públicas *_não destinadas_* dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_flo_clip_area} km²**'))

display(Markdown(f'''Dos {floresta_B_uf_area} km² de Florestas Públicas classificadas na base do Serviço Florestal Brasileiro, {gle_flo_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
```


### Glebas Federais sobrepostas a Unidades de Conservação.

#### Mapa Geral.

```{python}
#| echo: false
#| fig-align: center

fig_gle_uc, ax_gle_uc = plt.subplots()
uf_select.plot(ax=ax_gle_uc, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
uc_uf.plot(ax=ax_gle_uc, facecolor = cor_UC, edgecolor = 'none', alpha = 1, linewidth = 0.7)
gleba_uf_clip.plot(ax=ax_gle_uc, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor=cor_UC, alpha=1, edgecolor='none', label='Unidades de Conservação', linewidth=1))
patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
patch_list.append(patches.Patch(facecolor=cor_gleba_uc, label='Unid. de Consercação nas Glebas', linewidth=1))
# Creates a legend with the list of patches above.
ax_gle_uc.legend(handles=patch_list, fontsize=10, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
```

#### Glebas Federais com Unidades de Conservação.

```{python}
#| echo: false
#| fig-align: center
fig_gle_uc_clip, ax_gle_uc_clip = plt.subplots()
uf_select.plot(ax=ax_gle_uc_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
gle_uc_clip = gleba_uf_clip.overlay(uc_uf, how='intersection', keep_geom_type=False)
gleba_uf_clip.plot(ax=ax_gle_uc_clip, facecolor='none', edgecolor='blue', alpha = 0.5, linewidth = 0.7)
gle_uc_clip.plot(ax=ax_gle_uc_clip, facecolor = cor_gleba_uc, edgecolor = 'none', alpha = 1, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
patch_list.append(patches.Patch(facecolor = cor_gleba_uc, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Unid. de Conservação nas Glebas'))
# Creates a legend with the list of patches above.
ax_gle_uc_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)


plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()

# Recalculando a área das glebas no interior das florestas policônica em km2
gle_uc_clip['area_km2'] = (gle_uc_clip.to_crs(5880).area)/1000000

gle_uc_clip_area = gle_uc_clip['area_km2'].sum()
#percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
gle_uc_clip_area = locale.currency(gle_uc_clip_area, grouping=True, symbol=None)


display(Markdown(f'### A área de Unidades de Conservação dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_uc_clip_area} km²**'))

display(Markdown(f'''Dos {uc_uf_area} km² de Unidades de Conservação, {gle_uc_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
```

### Glebas Federais sobrepostas a Terras Indígenas.

#### Mapa Geral.


```{python}
#| echo: false
#| fig-align: center

fig_gle_ti, ax_gle_ti = plt.subplots()
uf_select.plot(ax=ax_gle_ti, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
ti_uf.plot(ax=ax_gle_ti, facecolor = cor_TI, edgecolor = 'none', alpha = 1, linewidth = 0.7)
gleba_uf_clip.plot(ax=ax_gle_ti, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor=cor_TI, alpha=0.6, edgecolor='none', label='Terras Indígenas', linewidth=1))
patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
patch_list.append(patches.Patch(facecolor=cor_gleba_ti, label='Terras Indígenas nas Glebas', linewidth=1))
# Creates a legend with the list of patches above.
ax_gle_ti.legend(handles=patch_list, fontsize=10, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
```

#### Glebas Federais com Terras Indígenas.

```{python}
#| echo: false
#| fig-align: center
fig_gle_ti_clip, ax_gle_ti_clip = plt.subplots()
uf_select.plot(ax=ax_gle_ti_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
gle_ti_clip = gleba_uf_clip.overlay(ti_uf, how='intersection', keep_geom_type=False)
gleba_uf_clip.plot(ax=ax_gle_ti_clip, facecolor = 'none', edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
gle_ti_clip.plot(ax=ax_gle_ti_clip, facecolor = cor_gleba_ti, edgecolor = 'none', alpha = 1, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
patch_list.append(patches.Patch(facecolor = cor_gleba_ti, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Terras Indígenas nas Glebas'))
# Creates a legend with the list of patches above.
ax_gle_ti_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)


plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()

# Recalculando a área das glebas no interior das florestas policônica em km2
gle_ti_clip['area_km2'] = (gle_ti_clip.to_crs(5880).area)/1000000

gle_ti_clip_area = gle_ti_clip['area_km2'].sum()
#percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
gle_ti_clip_area = locale.currency(gle_ti_clip_area, grouping=True, symbol=None)


display(Markdown(f'### A área de Terras Indígenas dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_ti_clip_area} km²**'))

display(Markdown(f'''Dos {ti_uf_area} km² de Terras Indígenas, {gle_ti_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
```

### Glebas Federais sobrepostas a Projetos de Assentamento.

#### Mapa Geral.


```{python}
#| echo: false
#| fig-align: center

fig_gle_pa, ax_gle_pa = plt.subplots()
uf_select.plot(ax=ax_gle_pa, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
pa_uf.plot(ax=ax_gle_pa, facecolor = cor_PA, edgecolor = 'none', alpha = 1, linewidth = 0.7)
gleba_uf_clip.plot(ax=ax_gle_pa, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor=cor_PA, alpha=0.6, edgecolor='none', label='Assentamentos', linewidth=1))
patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
patch_list.append(patches.Patch(facecolor=cor_gleba_pa, label='Assentamentos nas Glebas', linewidth=1))
# Creates a legend with the list of patches above.
ax_gle_pa.legend(handles=patch_list, fontsize=10, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()
```

#### Glebas Federais com Projetos de Assentamentos.

```{python}
#| echo: false
#| fig-align: center
fig_gle_pa_clip, ax_gle_pa_clip = plt.subplots()
uf_select.plot(ax=ax_gle_pa_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
gle_pa_clip = gleba_uf_clip.overlay(pa_uf, how='intersection', keep_geom_type=False)
gleba_uf_clip.plot(ax=ax_gle_pa_clip, facecolor = 'none', edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
gle_pa_clip.plot(ax=ax_gle_pa_clip, facecolor = cor_gleba_pa, edgecolor = 'none', alpha = 1, linewidth = 0.7)
# LEGENDAS
patch_list = []
patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
patch_list.append(patches.Patch(facecolor = cor_gleba_pa, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Assentamentos nas Glebas'))
# Creates a legend with the list of patches above.
ax_gle_pa_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
        bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)


plt.grid(visible=True)
plt.xlabel('Longitude (°)')
plt.ylabel('Latitude (°)')
plt.show()

# Recalculando a área das glebas no interior dos pa em km2
gle_pa_clip['area_km2'] = (gle_pa_clip.to_crs(5880).area)/1000000

gle_pa_clip_area = gle_pa_clip['area_km2'].sum()
#percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
gle_pa_clip_area = locale.currency(gle_pa_clip_area, grouping=True, symbol=None)


display(Markdown(f'### A área de Assentamentos dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_pa_clip_area} km²**'))

display(Markdown(f'''Dos {pa_uf_area} km² de Assentamentos, {gle_pa_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
```

### Glebas Federais sobrepostas a Territórios Quilombola.

#### Mapa Geral.


```{python}
#| echo: false
#| fig-align: center
try:
        fig_gle_tq, ax_gle_tq = plt.subplots()
        uf_select.plot(ax=ax_gle_tq, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
        tq_uf.plot(ax=ax_gle_tq, facecolor = cor_TQ, edgecolor = 'none', alpha = 1, linewidth = 0.7)
        gleba_uf_clip.plot(ax=ax_gle_tq, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
        # LEGENDAS
        patch_list = []
        patch_list.append(patches.Patch(facecolor=cor_TQ, alpha=0.6, edgecolor='none', label='Assentamentos', linewidth=1))
        patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
        patch_list.append(patches.Patch(facecolor=cor_gleba_tq, label='Quilombos nas Glebas', linewidth=1))
        # Creates a legend with the list of patches above.
        ax_gle_tq.legend(handles=patch_list, fontsize=10, loc='lower left',
                bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

        plt.grid(visible=True)
        plt.xlabel('Longitude (°)')
        plt.ylabel('Latitude (°)')
        plt.show()
except:
        display(Markdown(f'### Não há Territórios Quilobola demarcados no Estado do {uf_analise} dentro de Glebas Federais.'))
```

#### Glebas Federais com Territórios Quilombola.

```{python}
#| echo: false
#| fig-align: center
try:
        fig_gle_tq_clip, ax_gle_tq_clip = plt.subplots()
        uf_select.plot(ax=ax_gle_tq_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
        gle_tq_clip = gleba_uf_clip.overlay(tq_uf, how='intersection', keep_geom_type=False)
        gleba_uf_clip.plot(ax=ax_gle_tq_clip, facecolor = 'none', edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
        gle_tq_clip.plot(ax=ax_gle_tq_clip, facecolor = cor_gleba_tq, edgecolor = 'none', alpha = 1, linewidth = 0.7)
        # LEGENDAS
        patch_list = []
        patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
        patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
        patch_list.append(patches.Patch(facecolor = cor_gleba_pa, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Quilombos nas Glebas'))
        # Creates a legend with the list of patches above.
        ax_gle_tq_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
                bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)


        plt.grid(visible=True)
        plt.xlabel('Longitude (°)')
        plt.ylabel('Latitude (°)')
        plt.show()

        # Recalculando a área das glebas no interior dos pa em km2
        gle_tq_clip['area_km2'] = (gle_tq_clip.to_crs(5880).area)/1000000

        gle_tq_clip_area = gle_tq_clip['area_km2'].sum()
        #percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
        gle_tq_clip_area = locale.currency(gle_tq_clip_area, grouping=True, symbol=None)


        display(Markdown(f'### A área de Territórios Quilobola dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_tq_clip_area} km²**'))

        display(Markdown(f'''Dos {tq_uf_area} km² de Territórios Quilobola, {gle_tq_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
except:
        display(Markdown(f'### Não há Territórios Quilobola demarcados no Estado do {uf_analise} dentro de Glebas Federais.'))
```
### Glebas Federais sobrepostas a Imóveis Certificados.

#### Mapa Geral.


```{python}
#| echo: false
#| fig-align: center
if sigef_uf.shape[0]>0:
        fig_gle_sigef, ax_gle_sigef = plt.subplots()
        uf_select.plot(ax=ax_gle_sigef, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
        sigef_uf.plot(ax=ax_gle_sigef, facecolor = cor_SIGEF, edgecolor = 'none', alpha = 1, linewidth = 0.7)
        gleba_uf_clip.plot(ax=ax_gle_sigef, facecolor = cor_gleba, edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
        # LEGENDAS
        patch_list = []
        patch_list.append(patches.Patch(facecolor=cor_SIGEF, alpha=0.6, edgecolor='none', label='Imóveis Certificados', linewidth=1))
        patch_list.append(patches.Patch(facecolor=cor_gleba, edgecolor='blue', label='Gleba Federal', linewidth=1, alpha=0.5))
        patch_list.append(patches.Patch(facecolor='none', label='Imóveis Certificados nas Glebas', linewidth=1))
        # Creates a legend with the list of patches above.
        ax_gle_tq.legend(handles=patch_list, fontsize=10, loc='lower left',
                bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=12)

        plt.grid(visible=True)
        plt.xlabel('Longitude (°)')
        plt.ylabel('Latitude (°)')
        plt.show()
else:
        display(Markdown(f'### Não há Imóveis Certificados demarcados no Estado do {uf_analise} dentro de Glebas Federais.'))
```

#### Glebas Federais com Imóveis Certificados.

```{python}
#| echo: false
#| fig-align: center
if sigef_uf.shape[0]>0:
        fig_gle_sigef_clip, ax_gle_sigef_clip = plt.subplots()
        uf_select.plot(ax=ax_gle_sigef_clip, facecolor = 'none', edgecolor = 'black', linewidth = 0.7)
        gle_sigef_clip = gleba_uf_clip.overlay(sigef_uf, how='intersection', keep_geom_type=False)
        gleba_uf_clip.plot(ax=ax_gle_sigef_clip, facecolor = 'none', edgecolor = 'black', alpha = 0.5, linewidth = 0.7)
        gle_sigef_clip.plot(ax=ax_gle_sigef_clip, facecolor = cor_gleba_tq, edgecolor = 'none', alpha = 1, linewidth = 0.7)
        # LEGENDAS
        patch_list = []
        patch_list.append(patches.Patch(facecolor = 'none', edgecolor = 'black', linewidth = 0.7, label=f'{uf_analise}'))
        patch_list.append(patches.Patch(facecolor='none', edgecolor='blue', linewidth = 0.7, label='Gleba Federal'))
        patch_list.append(patches.Patch(facecolor = cor_gleba_sigef, edgecolor = 'none', alpha = 1, linewidth = 0.7, label='Imóveis Certificados nas Glebas'))
        # Creates a legend with the list of patches above.
        ax_gle_sigef_clip.legend(handles=patch_list, fontsize=8, loc='lower left',
                bbox_to_anchor = (1,0.75),title='Legenda', title_fontsize=10)
        plt.grid(visible=True)
        plt.xlabel('Longitude (°)')
        plt.ylabel('Latitude (°)')
        plt.show()



        # Recalculando a área das glebas no interior dos pa em km2
        gle_sigef_clip['area_km2'] = (gle_sigef_clip.to_crs(5880).area)/1000000

        gle_sigef_clip_area = gle_sigef_clip['area_km2'].sum()
        #percentual_floresta_B = round((floresta_B_uf_area/area_uf)*100,2)
        gle_sigef_clip_area = locale.currency(gle_sigef_clip_area, grouping=True, symbol=None)


        display(Markdown(f'### A área de Imóveis Certificados dentro das Glebas Federais no Estado do {uf_analise} é de: **{gle_sigef_clip_area} km²**'))

        display(Markdown(f'''Dos {sigef_uf_area} km² de Imóveis Certificados, {gle_sigef_clip_area} km² estão sobrepostas aos polígons de Glebas Públicas Federais registrados na base de dados do INCRA.'''))
else:
        display(Markdown(f'### Não há Imóveis Certificados demarcados no Estado do {uf_analise} dentro de Glebas Federais.'))
```
</div>